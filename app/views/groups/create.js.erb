<% if @group.errors.any? %>
  # Handle errors
<% else %>
  const content = '<%= escape_javascript(render '/shared/formtraveler', layout: false ) %>'
  let formDiv = document.querySelector(".form-traveler")
  formDiv.innerHTML = content
  
  const autocompleteFrom = (container, resultsFrom) => {
  let count = 1;
  fetch(`https://api.skypicker.com/locations/?term=${resultsFrom.value}`)
    .then((response) => response.json())
    .then((data) =>
      data.locations.forEach((element) => {
        if (element.type == "city" && element.airports > 1) {
          // prend tous les a√©roports de la ville
          container.insertAdjacentHTML(
            "beforeEnd",
            `<div class="proposition" id="${count}">${element.name}, ${element.country.name} (${element.code})</div>`
          );
          count += 1;
          // console.log(count);
        } else if (element.type == "airport") {
          container.insertAdjacentHTML(
            "beforeEnd",
            `<div class="proposition" id="${count}">‚úàÔ∏è ${element.name}, ${element.city.country.name} (${element.code})</div>`
          );
          count += 1;
          // console.log(count);
        }
      })
    );
  container.insertAdjacentHTML(
    "afterBegin",
    `<div class="proposition partout" id="${count}"><strong>üåç Toutes destinations</strong></div>`
  );
};

const initAutocomplete = () => {
    const resultsFrom = document.querySelector(".autocomplete2");
    const container = document.querySelector(".container-autocomplete2");
    const body = document.querySelector("body");
    
  if (container) {
    resultsFrom.addEventListener("keyup", () => {
      container.innerHTML = "";
      // console.log(resultsFrom.value);
      autocompleteFrom(container, resultsFrom);
    });

    body.addEventListener("click", (e) => {
      container.innerHTML = "";
    });

    container.addEventListener("click", (e) => {
      resultsFrom.value = e.target.innerText;
    });
  }
  <%# resultsFrom.classList.remove("autocomplete"); %>
};

setTimeout(initAutocomplete, 1000)
<% end %>